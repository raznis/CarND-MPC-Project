The model:
I used the kinematic bicycle model, ignoring dynamic effects such as friction and torque. The model state consists of x and y for the vehicle position, psi for the vehicle orientation, v for velocity, cte for cross-track error, and epsi for orientation error.

The following equations describe the model dynamics:

x[t+1] = x[t] + v[t] * cos(psi[t]) * dt
y[t+1] = y[t] + v[t] * sin(psi[t]) * dt
psi[t+1] = psi[t] + v[t] / Lf * delta[t] * dt
v[t+1] = v[t] + a[t] * dt
cte[t+1] = f(x[t]) - y[t] + v[t] * sin(epsi[t]) * dt
epsi[t+1] = psi[t] - psides[t] + v[t] * delta[t] / Lf * dt

Timestep Length and Elapsed Duration (N & dt):

The values I used for N and dt were 12 and 0.05 respectively. This means prediction for 0.6 seconds, reasonable for the reference speed of 40mph I had set. Anything shorter would not have sufficient lookahead, and increasing N or dt would hurt computational costs.

Polynomial Fitting and MPC Preprocessing:

I first converted the waypoint positions from the global coordinates to those relative to the vehicle (line 70 of main.cpp). Then a polynomial of order 3 was fitted to the transformed points.

Latency:

The original kinematic equations depend upon the actuations from the previous timestep, but with a delay of 100ms. The actuations are applied another timestep later (main.cpp line 152-153), so the equations have been altered to account for this.
